local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local TextChatService = game:GetService("TextChatService")

local LP = Players.LocalPlayer
local Character = LP.Character or LP.CharacterAdded:Wait()

-- Default states
local attackingSolstice = false
local attackingCannon = true
local teleportAbove = true
local alrasidFocus = false
local alrasidDefeated = false

LP.CharacterAdded:Connect(function(c)
    Character = c
    c:WaitForChild("HumanoidRootPart")
    attackingSolstice = false
    attackingCannon = true
    teleportAbove = true
    alrasidFocus = false
end)

task.wait(5)
local channel = TextChatService:WaitForChild("TextChannels"):WaitForChild("RBXGeneral")
channel:SendAsync("/skipall")

UIS.InputBegan:Connect(function(input, gpe)
    if gpe then return end
    if input.KeyCode == Enum.KeyCode.X then attackingSolstice = not attackingSolstice end
    if input.KeyCode == Enum.KeyCode.C then attackingCannon = not attackingCannon end
    if input.KeyCode == Enum.KeyCode.V then teleportAbove = not teleportAbove end
end)

local function getNearestTarget(maxDist, includeAlrasid)
    local closestHumanoid, closestHRP
    local minDist = maxDist or math.huge
    local root = Character:FindFirstChild("HumanoidRootPart")
    if not root then return end

    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("Humanoid") and obj.Health > 0 then
            local model = obj.Parent
            if model and model:IsA("Model") and model:FindFirstChild("HumanoidRootPart") then
                local isPlayerChar = Players:GetPlayerFromCharacter(model) ~= nil
                local isSelf = model == Character
                local isTLSOC = (model.Name == "The Last Spirit of Christmas")
                local isAlrasid = (model.Name == "Alrasid, Archbishop of the Equinox")
                if not isSelf and not isPlayerChar and not isTLSOC and (includeAlrasid or not isAlrasid) then
                    local hrp = model.HumanoidRootPart
                    local dist = (hrp.Position - root.Position).Magnitude
                    if dist < minDist then
                        minDist = dist
                        closestHumanoid = obj
                        closestHRP = hrp
                    end
                end
            end
        end
    end

    return closestHumanoid, closestHRP
end

task.spawn(function()
    local activeConnection = nil
    while true do
        task.wait(0.25)
        if not attackingSolstice then
            if activeConnection then activeConnection:Disconnect(); activeConnection = nil end
            continue
        end

        local hum, hrp = getNearestTarget(200, alrasidFocus)
        if hum and hrp then
            if not activeConnection then
                activeConnection = RunService.RenderStepped:Connect(function()
                    local tool = Character:FindFirstChild("Solstice") or LP.Backpack:FindFirstChild("Solstice")
                    if not tool then return end
                    local rf = tool:FindFirstChild("RemoteFunction")
                    if not rf then return end

                    local h, r = getNearestTarget(200, alrasidFocus)
                    if h and r then
                        local args = {
                            "shootspecial",
                            { r.Position, Character:FindFirstChild("HumanoidRootPart") and Character.HumanoidRootPart.Position or r.Position, 12 }
                        }
                        pcall(function() rf:InvokeServer(unpack(args)) end)
                    end
                end)
            end
        else
            if activeConnection then activeConnection:Disconnect(); activeConnection = nil end
        end
    end
end)

task.spawn(function()
    local activeConnection = nil
    while true do
        task.wait(0.25)
        if not attackingCannon or alrasidFocus then
            if activeConnection then activeConnection:Disconnect(); activeConnection = nil end
            continue
        end

        local hum, hrp = getNearestTarget(200, false)
        if hum and hrp then
            if not activeConnection then
                activeConnection = RunService.RenderStepped:Connect(function()
                    local tool = Character:FindFirstChild("Equinox Cannon") or LP.Backpack:FindFirstChild("Equinox Cannon")
                    if not tool then return end
                    local rf = tool:FindFirstChild("RemoteFunction")
                    if not rf then return end

                    local h, r = getNearestTarget(200, false)
                    if h and r then
                        local args = { "fire", { r.Position, r.Position - Vector3.new(0,2,0), 200 } }
                        pcall(function() rf:InvokeServer(unpack(args)) end)
                    end
                end)
            end
        else
            if activeConnection then activeConnection:Disconnect(); activeConnection = nil end
        end
    end
end)

task.spawn(function()
    local activeConnection = nil
    while true do
        task.wait(0.25)
        if not teleportAbove then
            if activeConnection then activeConnection:Disconnect(); activeConnection = nil end
            continue
        end
        if not activeConnection then
            activeConnection = RunService.RenderStepped:Connect(function()
                local root = Character:FindFirstChild("HumanoidRootPart")
                if not root then return end

                local enemyHum, enemyHRP = getNearestTarget(10000, false)
                if enemyHum and enemyHRP and enemyHum.Health > 0 then
                    alrasidFocus = false
                    root.CFrame = CFrame.new(enemyHRP.Position + Vector3.new(0,50,0))
                    return
                end

                local alrasid = workspace:FindFirstChild("Alrasid, Archbishop of the Equinox")
                if alrasid and alrasid:FindFirstChild("HumanoidRootPart") and alrasid:FindFirstChild("Humanoid") then
                    local hum = alrasid.Humanoid
                    if hum.Health > 0 then
                        alrasidFocus = true
                        attackingCannon = false
                        attackingSolstice = true
                        root.CFrame = CFrame.new(alrasid.HumanoidRootPart.Position + Vector3.new(0,50,0))
                    elseif not alrasidDefeated then
                        alrasidDefeated = true
                        alrasidFocus = false

                        local backpack = LP:FindFirstChild("Backpack")
                        local artifact = Character:FindFirstChild("Mysterious Artifact") or (backpack and backpack:FindFirstChild("Mysterious Artifact"))
                        if artifact then
                            if backpack and backpack:FindFirstChild("Mysterious Artifact") then
                                artifact.Parent = Character
                            end
                            task.wait(0.5)
                        end

                        local PartyFunction = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("PartySystem"):WaitForChild("PartyFunction")

                        local args1 = {
                            "createParty",
                            { settings = { FriendsOnly = false, Visual = true }, subplace = "Stronghold" }
                        }
                        pcall(function() PartyFunction:InvokeServer(unpack(args1)) end)

                        task.wait(1)

                        local args2 = { "joinSubplace", {} }
                        pcall(function() PartyFunction:InvokeServer(unpack(args2)) end)
                    end
                else
                    alrasidFocus = false
                end
            end)
        end
    end
end)

-- selfâ€‘requeue for infinite persistence
local queue = [[
    wait(3)
    print("queued script running")
    loadstring(game:HttpGet("https://raw.githubusercontent.com/javaguap/qot/refs/heads/main/boolymon"))()
]]
queue_on_teleport(queue)

